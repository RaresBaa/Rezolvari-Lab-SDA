#include <iostream>
#include <vector>

using namespace std;

/*
    Exemplu exercitii, puteti exersa aceste probleme si la vectori si vice versa:
Minimul si maximul dintr-o lista
Suma elementelor dintr-o lista
Dintr-o lista, vom trece intr-un vector doar elementele pare
Dintr-un vector vom trece intr-o lista doar elementele impare
Stergem elementele mai mari decat o valoare data
Inversul unei liste
Afisam elementul din mijloc al unei liste
Daca avem o lista cu secvente de 0 si 1, care este cea mai lunga secventa de 0
sortarea unei liste
concatenarea a doua liste
*/

template <typename T>
class List{
private:
    struct Node{
        T data;
        Node* next;

    };
    Node* head;
    Node* tail;
    int size;
public:
    List(){
        head = nullptr;
        tail = nullptr;
        size = 0;
    }
   /*
    ~List(){
        //trebuie sa stergem toate nodurile unul cate unul
        Node* temp = head;
        while(temp != nullptr){
            Node* next = temp->next;
            delete temp;
            temp = next;
        }

    }*/
    int getSize(){
        return size;
    }

    void push_back(T data){
        //cream un nou nod cu data noastra
        Node* temp = new Node;
        temp->data = data;
        //nu va avea un next deoarece va fi ultimul nod
        temp->next = nullptr;
        //daca lista este goala, atunci head si tail vor fi noul nod
        if(head == nullptr){
            head = temp;
            tail = temp;
        }
        else{
            //altfel, nodul va fi adaugat la finalul listei
            tail->next = temp;
            tail = temp;
        }
        size++;
    }

    T pop_back(){
        //daca lista este goala, nu avem ce sa stergem
        if(head == nullptr){
            return T();
        }else if(head == tail){
            //daca lista are un singur element, atunci head si tail vor fi nullptr
            T data = head->data;
            delete head;
            head = nullptr;
            tail = nullptr;
            size--;
            return data;
        }
        else{
            //altfel, vom parcurge lista pana la penultimul element
            Node* temp = head;
            while(temp->next != tail){
                temp = temp->next;
            }
            //stocam valoarea ultimului element
            T data = tail->data;
            //stergem ultimul element
            delete tail;
            //penultimul element va deveni ultimul element
            tail = temp;
            //ultimul element va deveni nullptr
            tail->next = nullptr;
            size--;
            return data;
        }
    }

    void insert(int index, T data){
        //daca indexul este mai mare decat size, atunci nu avem cum sa inseram
        if(index > size){
            return;
        }
        //daca indexul este 0, atunci vom insera la inceputul listei
        if(index == 0){
            Node* temp = new Node;
            temp->data = data;
            temp->next = head;
            head = temp;
            size++;
            return;
        }
        //daca indexul este egal cu size, atunci vom insera la finalul listei
        if(index == size){
            push_back(data);
            return;
        }
        //altfel, vom parcurge lista pana la indexul dorit
        Node* temp = head;
        for(int i = 0; i < index - 1; i++){
            temp = temp->next;
        }
        //cream un nou nod cu data noastra
        Node* newNode = new Node;
        newNode->data = data;
        //noul nod va avea next-ul nodului de la indexul dorit
        newNode->next = temp->next;
        //nodul de la indexul dorit va avea next-ul noului nod
        temp->next = newNode;
        size++;
    }

    T erase(int index){
        //daca indexul este mai mare decat size, atunci nu avem ce sa stergem
        if(index >= size){
            return T();
        }
        //daca indexul este 0, atunci vom sterge primul element
        if(index == 0){
            Node* temp = head;
            T data = head->data;
            head = head->next;
            delete temp;
            size--;
            return data;
        }
        //daca indexul este egal cu size - 1, atunci vom sterge ultimul element
        if(index == size - 1){
            return pop_back();
        }
        //altfel, vom parcurge lista pana la indexul dorit
        Node* temp = head;
        for(int i = 0; i < index - 1; i++){
            temp = temp->next;
        }
        //stocam valoarea nodului de la indexul dorit
        T data = temp->next->data;
        //stergem nodul de la indexul dorit
        Node* toDelete = temp->next;
        temp->next = temp->next->next;
        delete toDelete;
        size--;
        return data;
    }

    T& operator[](int index){
        //daca indexul este mai mare decat size, atunci nu avem ce sa returnam
        if(index >= size){
            return head->data;
        }
        //altfel, vom parcurge lista pana la indexul dorit
        Node* temp = head;
        for(int i = 0; i < index; i++){
            temp = temp->next;
        }
        //returnam valoarea nodului de la indexul dorit
        return temp->data;
    }

    void print(){
        Node* temp = head;
        while(temp != nullptr){
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void read(){
        int n;
        cin >> n;
        for(int i = 0; i < n; i++){
            T data;
            cin >> data;
            push_back(data);
        }
    }

   void concatenare(List<T> lista)
   {
        for(int i=0; i<lista.getSize();++i)
        {
            push_back(lista[i]);

        }
   }

   T pop_front() {
        Node* temp = head;
        head = head->next;
        T data = temp->data;
        delete temp;
        size--;
        return data;
    }


};

void change()
{
    List<int> lista;
    vector<int> v;
    lista.read();
    for(int i=0;i<lista.getSize();i++)
    {
        if(lista[i]%2==0)
        {
            v.push_back(lista[i]);
        }
    }
    for(auto it:v)
    {
        cout<<it<<" ";
    }
}
void min_max()
{
    List<int> lista;
    lista.read();
    int min=lista[0];
    int max=lista[0];
    for(int i=1;i<lista.getSize();i++)
    {
        if(min>lista[i])
            min=lista[i];
        if(max<lista[i])
            max=lista[i];
    }
    cout<<min<<" "<<max;

}

void invers()
{
    List<int> lista;
    lista.read();
    int aux;
    for(int i = 0; i < lista.getSize() / 2; i++)
    {
        aux = lista[i];
        lista[i] = lista [lista.getSize() - 1 - i];
        lista[lista.getSize() - 1 - i] = aux;
    }
    for(int i = 0; i < lista.getSize(); i++)
        cout << lista[i] << " ";
}

void concatenare()
{
    List<int> lista1;
    List<int> lista2;
    lista1.read();
    lista2.read();

    lista1.concatenare(lista2);

    for(int i=0; i<lista1.getSize();++i)
    {
        cout<<lista1[i]<<" ";
    }
}
void secventa()
{
    List<int> lista1;
    lista1.read();
    int k=0,max=0;
    for(int i=0;i<lista1.getSize();++i)
    {
        if(lista1[i]==0)
        {
            k++;
            if(max<k)
                max=k;
        }
        if(lista1[i]==1)
        {

            k=0;
        }
    }
    cout<<max;
}

void stergere_mare()
{
    List<int> lista1;

    int max;
    cin>>max;
    lista1.read();
    for(int i=0; i<lista1.getSize(); i++)
    {
        if(lista1[i] > max)
        {
            lista1.erase(i);
            i--;
        }
    }
    lista1.print();
}

void testPopFront() {
    List<char> listaCaractere;
    listaCaractere.read();
    cout << listaCaractere.pop_front() << endl;
    listaCaractere.print();
}

void sortare_vector()
{
    vector<int>v;

    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int k;
        cin>>k;
        v.push_back(k);
    }
    int N;
    while(N) {
        N=0;
        for (int i = 0; i < n; i++) {
            if (v[i] > v[i + 1]) {
                N=1;
                int aux;
                aux = v[i];
                v[i] = v[i + 1];
                v[i + 1] = aux;
            }

        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<v[i];
    }
}

int main(){
//    stergere_mare();
    //secventa();
    sortare_vector();
    return 0;
}
