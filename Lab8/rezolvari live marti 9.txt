#include <iostream>

using namespace std;

/*
1.Vom gasi intr-o lista perechea de elemente care au suma o valoare data.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Se citeste de la tastatura o valoare x.
Trebuie sa gasim o pereche de elemente din lista care au suma egala cu x.
Vom afisa elementele din pereche.

2.Vom pune elementele pare la inceputul listei, iar elementele impare la final.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa lista dupa ce am pus elementele pare la inceputul listei, iar elementele impare la final.

3. Folosind algoritmul slow si fast pointer, vom determina daca o lista este circulara.

4. Rotim lista cu k pozitii spre stanga.
Se citeste de la tastatura k-numarul de pozitii rotite, n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa lista dupa ce am rotit-o cu k pozitii spre stanga.

5. Stergem elementele mai mari decat media elementelor din lista.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa lista dupa ce am sters elementele mai mari decat media elementelor din lista.

6. Stergem elementele din lista care se repeta.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa lista dupa ce am sters elementele care se repeta.

De asemenea, putem implementa toate operatiile pentru o lista:
-push_back()
-pop_back()
-push_front()
-pop_front()
-insert()
-erase()
-getSize()
-operatorul []
 */


// Trebuie declarata inainte pentru a putea folosi friend in clasa Node
template <typename T>
class DoubleList;

// Clasa Node este definita inainte pentru a putea fi folosita in clasa DoubleList
template <typename T>
class Node {
private:
    T data;
    Node<T>* next;
    Node<T>* prev;

    //pentru template-uri trebuie adaugat <T>
    friend class DoubleList<T>;

public:
    // Constructor pentru fiecare nod
    Node(T val) : data(val), next(nullptr), prev(nullptr) {}
};

template <typename T>
class DoubleList {
private:
    Node<T>* head;
    Node<T>* tail;
    int size;
public:
    // Constructor pentru lista
    DoubleList() : head(nullptr), tail(nullptr), size(0) {}

    ~DoubleList() {
        for (int i = 0; i < size; i++) {
            Node <T> *toDelete = head;
            head = head->next;
            delete toDelete;
        }
    }

    int getSize(){
        return size;
    }

    void push_back(T data){
        Node<T>* newNode = new Node<T>(data);
        if (head == nullptr){
            head = newNode;
            tail = newNode;
        }else{
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    void push_front(T data){
        Node<T>* newNode = new Node<T>(data);
        if (head == nullptr){
            head = newNode;
            tail = newNode;
        }else{
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
        size++;
    }

    T pop_back(){
        Node<T>* temp = tail;
        T data = temp->data;
        tail = tail->prev;
        if (tail != nullptr){
            tail->next = nullptr;
        }else{
            head = nullptr;
        }
        delete temp;
        size--;
        return data;
    }

    T pop_front(){
        Node<T>* temp = head;
        T data = temp->data;
        head = head->next;
        if (head != nullptr){
            head->prev = nullptr;
        }else{
            tail = nullptr;
        }
        delete temp;
        size--;
        return data;
    }

    void insert(T data, int index){
        if (index == 0){
            push_front(data);
            return;
        }
        if (index == size){
            push_back(data);
            return;
        }
        Node<T>* newNode = new Node<T>(data);
        Node<T>* temp = head;
        for(int i=0; i<index-1; i++){
            temp = temp->next;
        }
        newNode->next = temp->next;
        newNode->prev = temp;
        temp->next->prev = newNode;
        temp->next = newNode;
        size++;
    }

    T erase(int index){
        if (index == 0){
            return pop_front();
        }
        if (index == size-1){
            return pop_back();
        }
        Node<T>* temp = head;
        for(int i=0; i<index; i++){
            temp = temp->next;
        }
        T data = temp->data;
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        delete temp;
        size--;
        return data;
    }

    T& operator[](int index){
        Node<T>* temp = head;
        for(int i=0; i<index; i++){
            temp = temp->next;
        }
        return temp->data;
    }

    void makeCircular(){
        //pentru a face lista circulara trebuie sa legam tail de head
        tail->next = head;
        head->prev = tail;
    }

    bool checkCircular(){
        Node<T> *fast, *slow;
        fast=head;
        slow=head;
        while(fast != nullptr && fast->next != nullptr)
        { fast = fast -> next -> next;
            slow = slow -> next;
            if(fast == slow)
                return 1;
        }
        return 0;
    }

    void rotate(int k){
        Node<T>*elemCurent=head;
        for(int i=0;i<k-1;i++)
            elemCurent=elemCurent->next;
        tail->next=head;
        head->prev=tail;
        head=elemCurent->next;
        elemCurent->next->prev=nullptr;
        tail=elemCurent;
        tail->next=nullptr;
    }
};

void sterge_elemente_repetitive()
{
    int n=0;
    DoubleList <int> list;
    cin>>n;
    for(int i=0; i<n;i++)
    {
        int a;
        cin>>a;
        list.push_back(a);
    }
    for(int i=0; i<list.getSize(); i++)
        for(int j=i+1;j<list.getSize();j++)
        {
            if(list[j]==list[i])
            {list.erase(j);
                j--;}
        }
    for(int i=0;i<list.getSize();i++)
    {
        cout<<list[i]<<" ";
    }
}

void rotire(){
    int k,n;
    cin>>k>>n;
    DoubleList<int> l;
    for(int i=0;i<n;i++){
        int data;
        cin>>data;
        l.push_back(data);
    }

    l.rotate(k);

    for(int i=0;i<n;i++){
        cout<<l[i]<<" ";
    }

}

void stergere_elemente_medie()
{
    int n;
    DoubleList<int>list;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int k;
        cin>>k;
        list.push_back(k);
    }
    int suma=0;
    for(int i=0;i<n;i++)
    {
        suma=suma+list[i];
    }
    int medie=0;
    medie=suma/n;
    for(int i=0;i<list.getSize();i++){
        if(list[i]>medie)
        {
            list.erase(i);
            i--;
        }
    }
    for(int i=0;i<list.getSize();i++)
    {
        cout<<list[i]<<" ";
    }
}

void elempare(){
    int n;
    cin>>n;
    DoubleList<int> l;
    for(int i=0;i<n;i++){
        int data;
        cin>>data;
        l.push_back(data);
    }

    int contor=0;
    for(int i=0;i<l.getSize();++i)
    {

        if(l[i]%2==0)
        {
            int val=l.erase(i);

            l.insert(val, contor);
            ++contor;

        }
    }

    for(int i=0;i<n;i++){
        cout<<l[i]<<" ";
    }

}

void pereche() {
    int n,k;
    cin >> k>>n;
    DoubleList<int> l;
    for (int i = 0; i < n; i++) {
        int data;
        cin >> data;
        l.push_back(data);
    }
    for(int i=0;i<n;i++){
        int cautat=k-l[i];
        for(int j=i+1;j<n;j++){
            if(cautat == l[j]){
                cout<<l[i]<<" "<<l[j];
                return;
            }
        }
    }


}

int main(){
    pereche();
    return 0;
}
