#include <iostream>
#include <queue>

using namespace std;

template<typename T>
class BinaryTree;

template<typename T>
class Node{
    T data;
    Node<T> *left;
    Node<T> *right;

    Node<T>* eraseLeftLeaf(T& elem){
        if(left)
            //mergem recursiv in stanga
            left = left->eraseLeftLeaf(elem);
        else{
            //stocam valorea nodului care trebuie sters
            elem = data;
            if(right){
                //daca exista nod in dreapta, il stergem si returnam nodul curent
                Node* temp = right;
                delete this;
                return temp;
            }
            //daca nu exista nod in dreapta, stergem nodul curent si returnam nullptr
            delete this;
            return nullptr;
        }
        return this;
    }
public:
    explicit Node(T data){
        this->data = data;
        left = right = nullptr;
    }

    Node(Node<T> *left, Node<T> *right, T data){
        this->left = left;
        this->right = right;
        this->data = data;
    }

    ~Node(){
        delete left;
        delete right;
    }

    friend class BinaryTree<T>;

    T getData(){
        return data;
    }

    Node<T>* find(T elem) {
        if (this->data == elem) {
            return this;
        }

        Node<T> *found = nullptr;
        //parcurgem recursiv arborele
        if (left) {
            found = left->find(elem);
        }
        if (!found && right) {
            found = right->find(elem);
        }
        return found;
    }

    Node<T>* erase(T &elem){
        //exista 3 cazuri: nodul este frunza, nodul are un singur fiu, nodul are 2 fii
        //daca nodul curent este nodul care trebuie sters
        if(elem == data){
            if(left == nullptr && right == nullptr){
                //daca nodul este frunza, il stergem si returnam nullptr
                delete this;
                return nullptr;
            }
            if(left!=nullptr && right == nullptr){
                //daca nodul are un singur fiu, il stergem si returnam fiul
                Node<T>* temp = left;
                left = nullptr;
                delete this;
                return temp;
            }
            if(left == nullptr && right != nullptr){
                //daca nodul are un singur fiu, il stergem si returnam fiul
                Node<T>* temp = right;
                right = nullptr;
                delete this;
                return temp;
            }
            //daca nodul are 2 fii, cautam cel mai din dreapta nod din subarborele stang
            right = right->eraseLeftLeaf(data);
            return this;
        }
        //daca nodul curent nu este nodul care trebuie sters, cautam recursiv in subarborii stang si drept
        if(elem < data){
            if(left) {
                left = left->erase(elem);
            } else {
                return nullptr;
            }
        } else {
            if(right) {
                right = right->erase(elem);
            } else {
                return nullptr;
            }
        }
        return this;
    }
};

template<typename T>
class BinaryTree {
    Node<T> *root;

public:
    BinaryTree(){
        root = nullptr;
    }
    ~BinaryTree(){
        delete root;
    }

    void add_descendants(Node<T> * node){
        //adaugam recursiv descendentii nodului curent
        //daca citim valoarea 0, o consideram ca si cum nu ar exista nod
        T data;
        cout<<"\nFii nodului "<<node->data<<" : ";
        cout<<"\nNod stang: ";
        cin>>data;
        if(data == 0){
            node->left = nullptr;
        }else{
            node->left = new Node<T>(data);
        }
        cout<<"Nod drept: ";
        cin>>data;
        if(data == 0){
            node->right = nullptr;
        }else{
            node->right = new Node<T>(data);
        }

        if(node->left != nullptr){
            add_descendants(node->left);
        }
        if(node->right != nullptr){
            add_descendants(node->right);
        }
    }

    void treeFromKeyboard(){
        //citim radacina si dupa folosim functia add_descendants pentru a adauga descendentii
        T data;
        if(root){
            return;
        }
        cout<<"\nNod radacina: ";
        cin>>data;
        root = new Node<T>(data);
        add_descendants(root);
    }

    Node<T>* find(T data){
        if(root){
            return root->find(data);
        }
        return nullptr;
    }

    void printPreorder(Node<T> *node){
        if(node){
            cout<<node->data<<" ";
            if(node->left){
                printPreorder(node->left);
            }
            if(node->right){
                printPreorder(node->right);
            }
        }
    }

    void printInorder(Node<T> *node){
        if(node){
            if(node->left){
                printInorder(node->left);
            }
            cout<<node->data<<" ";
            if(node->right){
                printInorder(node->right);
            }
        }
    }

    void printPostorder(Node<T> *node){
        if(node){
            if(node->left){
                printPostorder(node->left);
            }
            if(node->right){
                printPostorder(node->right);
            }
            cout<<node->data<<" ";
        }
    }

    void printPreorder(){
        printPreorder(root);
    }

    void printInorder(){
        printInorder(root);
    }

    void printPostorder(){
        printPostorder(root);
    }

    void printLevelOrder() {
        //ca sa putem vedea mai usor arborele.
        //este doar un exemplu
        if (root == nullptr) {
            cout << "Tree is empty!" << endl;
            return;
        }
        queue<Node<T>*> nodesQueue;
        nodesQueue.push(root);

        while (!nodesQueue.empty()) {
            int levelNodes = nodesQueue.size();
            while (levelNodes > 0) {
                Node<T>* node = nodesQueue.front();
                nodesQueue.pop();
                cout << node->data << " ";

                if (node->left != nullptr)
                    nodesQueue.push(node->left);
                if (node->right != nullptr)
                    nodesQueue.push(node->right);
                levelNodes--;
            }
            cout << endl;
        }
    }

    void insertBST(T data){
        //cu aceasta functie cream un arbore binar de cautare

        //daca arborele este gol, adaugam radacina
        if(root == nullptr){
            root = new Node<T>(data);
            return;
        }

        Node<T> *current = root;
        Node<T> *parent = nullptr;
        //parcurgem arborele pana cand gasim un nod care nu are fiu in directia in care trebuie inserat nodul
        while(current){
            parent = current;
            if(data < current->data){
                //daca valoarea nodului este mai mica decat valoarea nodului curent, mergem in stanga
                current = current->left;
            }else{
                //daca valoarea nodului este mai mare decat valoarea nodului curent, mergem in dreapta
                current = current->right;
            }
        }
        //adaugam nodul in functie de valoarea acestuia
        if(data < parent->data){
            parent->left = new Node<T>(data);
        }else{
            parent->right = new Node<T>(data);
        }

    }

    void erase(T data){
        if(!root){
            return;
        }
        root = root->erase(data);
    }


};

void testTree(){
    BinaryTree<int> tree;
    cout<<"Introduceti elementele arborelui: ";
    tree.treeFromKeyboard();
    cout<<"\nPreorder: ";
    tree.printPreorder();
    cout<<"\nInorder: ";
    tree.printInorder();
    cout<<"\nPostorder: ";
    tree.printPostorder();
    cout<<"\nLevelorder:\n ";
    tree.printLevelOrder();
    cout<<"\nIntroducereBST:\n";
    tree.insertBST(10);
    tree.insertBST(5);
    tree.insertBST(15);
    tree.insertBST(3);
    tree.insertBST(7);
    tree.insertBST(12);
    tree.insertBST(17);
    tree.printLevelOrder();
    cout<<"\nFind 10: ";
    Node<int> *node = tree.find(10);
    if(node){
        cout<<"Nodul "<<node->getData()<<" a fost gasit!";
    }else{
        cout<<"Nodul nu a fost gasit!";
    }
    cout<<"\nFind 100: ";
    node = tree.find(100);
    if(node){
        cout<<"Nodul "<<node->getData()<<" a fost gasit!";
    }else{
        cout<<"Nodul nu a fost gasit!";
    }
    cout<<"\nStergere nod 10:\n";
    tree.erase(10);
    cout<<"\nLevelorder:\n ";
    tree.printLevelOrder();
}

int main(){
    testTree();
    return 0;
}
