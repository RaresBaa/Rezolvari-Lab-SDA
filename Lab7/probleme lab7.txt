#include <iostream>

using namespace std;

/*
1.Vom aduna vecinii fiecarui element.
Se citeste de la tastatura m-numarul de runde pe care le vom simula, apoi n-dimensiunea listei, urmat de n elemente care reprezinta elementele intiale.
Pentru fiecare element din lista, vom aduna cu el insusi vecinii lui. Adunarea se va face de la stanga la dreapta.
Dupa ce am facut asta de m ori, vom afisa lista finala.

2.Vom gasi intr-o lista perechea de elemente care au suma o valoare data.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Se citeste de la tastatura o valoare x.
Trebuie sa gasim o pereche de elemente din lista care au suma egala cu x.
Vom afisa elementele din pereche.

3.Vom pune elementele pare la inceputul listei, iar elementele impare la final.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa lista dupa ce am pus elementele pare la inceputul listei, iar elementele impare la final.

4. Folosind algoritmul slow si fast pointer, vom gasi elementul din mijlocul listei.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa elementul din mijlocul listei.

Alte exemple de probleme:
- rotim lista cu k pozitii
- stergem elementele din lista care se repeta
- stergem elementele din lista care sunt mai mari decat media elementelor din lista

De asemenea, putem implementa toate operatiile pentru o lista:
-push_back()
-pop_back()
-push_front()
-pop_front()
-insert()
-erase()
-getSize()
-operatorul []
 */

template <typename T>
class DoubleList{
private:
    struct Node{
        T data;
        Node *next, *prev;
    };
    Node *head, *tail;
    int size;
public:
    DoubleList(){
        head = tail = nullptr;
        size = 0;
    }

    ~DoubleList(){
        while(head != nullptr){
            Node *aux = head;
            head = head->next;
            delete aux;
        }
    }

    int getSize(){
        return size;
    }

    void push_back(T data){
        Node *nodNou = new Node{data, nullptr, tail};
        /*
         * Puteti folosi ce metoda de a declara un nou nod doriti.
         * Daca nu doriti cum este mai sus, puteti folosi:
         * nodNou->data = data;
         */
        //daca lista nu e goala, adaugam noul nod la final
        if(tail != nullptr)
            tail->next = nodNou;
        else
            //daca lista e goala, noul nod va fi si capul listei
            head = nodNou;
        tail = nodNou;
        size++;
    }

    T pop_back(){
        //daca lista e goala, nu avem ce sa returnam
        if(tail == nullptr)
            return T();
        //salvam data si nodul care va fi sters
        T data = tail->data;
        Node *nodStergere = tail;
        //modificam coada spre penultimul element
        tail = tail->prev;
        //daca lista nu e goala, atunci ultimul element va avea next nullptr
        if(tail != nullptr)
            tail->next = nullptr;
        else
            head = nullptr;
        delete nodStergere;
        size--;
        return data;
    }

    void push_front(T data){
        Node *nodNou = new Node{data, head, nullptr};
        //daca lista nu e goala, adaugam noul nod la inceput
        if(head != nullptr)
            head->prev = nodNou;
        else
            //daca lista e goala, noul nod va fi si coada listei
            tail = nodNou;
        head = nodNou;
        size++;
    }

    void insert(T data, int index){
        //daca indexul e mai mare decat dimensiunea listei, nu facem nimic
        if(index > size)
            return;
        //daca indexul e 0, atunci inseram la inceput
        if(index == 0){
            push_front(data);
            return;
        }
        //daca indexul e egal cu dimensiunea listei, atunci inseram la final
        if(index == size){
            push_back(data);
            return;
        }
        //daca indexul e mai mic decat dimensiunea listei, atunci inseram la index
        Node *nodNou = new Node{data, nullptr, nullptr};
        //parcurgem lista pana la index
        Node *nodParcurgere = head;
        for(int i = 0; i < index; i++)
            nodParcurgere = nodParcurgere->next;
        //inseram noul nod in lista
        nodNou->next = nodParcurgere;
        nodNou->prev = nodParcurgere->prev;
        nodParcurgere->prev->next = nodNou;
        nodParcurgere->prev = nodNou;
        size++;
    }

    T pop_front(){
        //daca lista e goala, nu avem ce sa returnam
        if(head == nullptr)
            return T();
        //salvam data si nodul care va fi sters
        T data = head->data;
        Node *nodStergere = head;
        //modificam capul spre al doilea element
        head = head->next;
        //daca lista nu e goala, atunci primul element va avea prev nullptr
        if(head != nullptr)
            head->prev = nullptr;
        else
            tail = nullptr;
        delete nodStergere;
        size--;
        return data;
    }

    T erase(int index){
        //daca indexul e mai mare decat dimensiunea listei, nu facem nimic
        if(index >= size)
            return T();
        //daca indexul e 0, atunci stergem de la inceput
        if(index == 0)
            return pop_front();
        //daca indexul e egal cu dimensiunea listei - 1, atunci stergem de la final
        if(index == size - 1)
            return pop_back();
        //daca indexul e mai mic decat dimensiunea listei, atunci stergem de la index
        //parcurgem lista pana la index
        Node *nodParcurgere = head;
        for(int i = 0; i < index; i++)
            nodParcurgere = nodParcurgere->next;
        //stergem nodul din lista
        nodParcurgere->prev->next = nodParcurgere->next;
        nodParcurgere->next->prev = nodParcurgere->prev;
        T data = nodParcurgere->data;
        delete nodParcurgere;
        size--;
        return data;
    }

    T& operator[](int index){
        //vom parcurge lista pana la indexul dorit
        Node* nodParcurgere = head;
        for(int i = 0; i < index; i++){
            nodParcurgere = nodParcurgere->next;
        }
        //returnam valoarea nodului de la indexul dorit
        return nodParcurgere->data;
    }

    T middleElement(){
        //vom folosi algoritmul slow si fast pointer
        //vom avea 2 pointeri, unul care se va deplasa cu o pozitie la fiecare pas, iar celalalt cu 2 pozitii
        //cand celalalt ajunge la final, atunci primul va fi in mijloc
        Node *slow = head, *fast = head;
        while(fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow->data;
    }
};

void testDoubleList(){
#define print cout<<"\n\tNoua lista: ";for(int i=0; i<l.getSize(); i++){cout<<l[i]<<" ";}
    DoubleList<int> l;
    cout<< "Test push_back:";
    for(int i=0; i<20; i++){
        l.push_back(i);
    }
    print
    cout<<"\nTest pop_back, 5 elem: \n\t";
    for(int i=0; i<5; i++){
        cout<< l.pop_back()<<" ";
    }
    print
    cout<<"\nTest push_front:";
    l.push_front(1000);
    print
    cout<<"\nTest insert, index 5:";
    l.insert(2000, 5);
    print
    cout<<"\nTest pop_front, 5 elem: \n\t";
    for(int i=0; i<5; i++){
        cout<< l.pop_front()<<" ";
    }
    print
    cout<<"\nTest erase, index 5:";
    l.erase(5);
    print
}

void sumaVecini(){
    /*
1.Vom aduna vecinii fiecarui element.
Se citeste de la tastatura m-numarul de runde pe care le vom simula, apoi n-dimensiunea listei, urmat de n elemente care reprezinta elementele intiale.
Pentru fiecare element din lista, vom aduna cu el insusi vecinii lui.Dupa ce am facut asta de m ori, vom afisa lista finala.
     */
    int m, n;
    cin>>m>>n;
    DoubleList<int> l;
    for(int i=0; i<n; i++){
        int x;
        cin>>x;
        l.push_back(x);
    }
    //simulam m runde
    for(int i=0; i<m; i++){
        //pentru fiecare element din lista, adunam cu vecinii lui
        //pentru capete, avem doar un vecin
        l[0] += l[1];
        for(int j=1; j<l.getSize()-1; j++){
            l[j] += l[j-1] + l[j+1];
        }

        l[l.getSize()-1] += l[l.getSize()-2];
    }
    //afisam lista finala
    for(int i=0; i<l.getSize(); i++){
        cout<<l[i]<<" ";
    }
}

void perecheSuma() {
    /*
2.Vom gasi intr-o lista perechea de elemente care au suma o valoare data.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Se citeste de la tastatura o valoare x.
Trebuie sa gasim o pereche de elemente din lista care au suma egala cu x.
Vom afisa elementele din pereche.
     */
    int n, x;
    cin >> n;
    DoubleList<int> l;
    for (int i = 0; i < n; i++) {
        int data;
        cin >> data;
        l.push_back(data);
    }
    cin >> x;
    //vom parcurge lista si pentru fiecare element, vom cauta in lista un element care sa aiba suma cu el egala cu x
    for (int i = 0; i < l.getSize(); i++) {
        int cautat = x - l[i];
        for (int j = 0; j < l.getSize(); j++) {
            if (l[j] == cautat) {
                cout << l[i] << " " << l[j];
                return;
            }
        }
    }
}

void parImpar(){
    /*
3.Vom pune elementele pare la inceputul listei, iar elementele impare la final.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa lista dupa ce am pus elementele pare la inceputul listei, iar elementele impare la final.
        */
        int n;
        cin>>n;
        DoubleList<int> l;
        for(int i=0; i<n; i++){
            int data;
            cin>>data;
            l.push_back(data);
        }
        //vom parcurge lista si pentru fiecare element, il vom muta la inceputul listei daca e par
        //ca sa pastram ordinea elementelor, putem adauga un contor
        //care sa retina cate elemente am mutat la inceputul listei
        int contorPar = 0;
        for(int i=0; i<l.getSize(); i++){
            if(l[i] % 2 == 0){
                //daca elementul e par, il mutam la inceputul listei
                l.insert(l[i], contorPar);
                //stergem elementul de la vechea pozitie
                l.erase(i+1);
                contorPar++;
            }
        }

        //afisam lista
        for(int i=0; i<l.getSize(); i++){
            cout<<l[i]<<" ";
        }
}

void mijloc(){
    /*
4. Folosind algoritmul slow si fast pointer, vom gasi elementul din mijlocul listei.
Se citeste de la tastatura n-dimensiunea listei, urmat de n elemente care reprezinta elementele listei.
Vom afisa elementul din mijlocul listei.
     */
    int n;
    cin>>n;
    DoubleList<int> l;
    for(int i=0; i<n; i++){
        int data;
        cin>>data;
        l.push_back(data);
    }
    cout<<l.middleElement();
}

int main(){
    testDoubleList();
    return 0;
}
