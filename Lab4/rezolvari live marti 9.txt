#include <iostream>

using namespace std;

/*
Liste simplu inlantuite (singly linked list) manuale
Functii pe care le vom implementa:
constructor, destructor
getSize()
push_back()
pop_back()
insert()
delete()
operator[]
print()
read()

Exemplu exercitii, puteti exersa aceste probleme si la vectori si vice versa:
Minimul si maximul dintr-o lista
Suma elementelor dintr-o lista
Dintr-o lista, vom trece intr-un vector doar elementele pare
Dintr-un vector vom trece intr-o lista doar elementele impare
Stergem elementele mai mari decat o valoare data
Inversul unei liste
Afisam elementul din mijloc al unei liste
Daca avem o lista cu secvente de 0 si 1, care este cea mai lunga secventa
sortarea unei liste
concatenarea a doua liste
*/

template < typename DT>
class List{
private:
    struct Nod{
        DT data;
        Nod *next;
    };
    Nod *head;
    Nod *tail;
    int size;
public:
    List()
    {
        size = 0;
        head = nullptr;
        tail = nullptr;
    }
    ~List()
    {
        Nod *i = head;
        while (i != nullptr)
        {
            Nod *next = i -> next;
            delete i;
            i = next;
        }
    }
    int getSize()
    {
        return size;
    }
    void push_back(DT element)
    {
        Nod* temp=new Nod;
        temp->data=element;
        temp->next=nullptr;
        if(head==nullptr)
        {
            head=temp;
            tail=temp;

        }
        else
        {
            tail->next=temp;
            tail=temp;

        }
        size++;

    }
    DT pop_back()
    {
        if(head == nullptr)
            return DT();
        else if(head == tail)
        {
            DT data;
            data = head->data;
            delete head;
            head=nullptr;
            tail=nullptr;
            size --;
            return data;
        }
        else
        {
            Nod* temp = head;
            while(temp->next!=tail)
                temp = temp->next;
            DT data;
            data = tail -> data;
            delete tail;
            tail = temp;
            tail -> next = nullptr;
            size--;
            return data;
        }
    }
    void insert( int index,DT element)
    {
        if(index == 0)
        {
            Nod* data = new Nod;
            data->data = element;
            data->next = head;
            head = data;
            size ++;
        }
        else if(index ==  size)
        {
            push_back(element);
        }
        else {
            Nod *temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Nod *new_nod = new Nod;
            new_nod->data = element;
            new_nod->next = temp->next;
            temp->next = new_nod;
            size++;
        }
    }
    DT erase(int index)
    {
        if(index == 0)
        {
            Nod *temp = head;
            DT data = head->data;
            head = head->next;
            delete temp;
            size--;
            return data;
        }
        else if(index == size - 1)
        {
            return pop_back();
        }
        else
        {
            Nod *elem = head;
            for(int i = 0; i < index - 1; i++)
            {
                elem = elem->next;
            }
            DT data = elem->next->data;
            Nod *to_delete = elem->next;
            elem->next = elem->next->next;
            delete to_delete;
            size--;
            return data;
        }

    }

    DT& operator[](int index){
        //daca indexul este mai mare decat size, atunci nu avem ce sa returnam
        if(index >= size){
            return head->data;
        }
        //altfel, vom parcurge lista pana la indexul dorit
        Nod* temp = head;
        for(int i = 0; i < index; i++){
            temp = temp->next;
        }
        //returnam valoarea nodului de la indexul dorit
        return temp->data;
    }

    void print(){
        Nod* temp = head;
        while(temp != nullptr){
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void read(){
        int n;
        cin >> n;
        for(int i = 0; i < n; i++){
            DT data;
            cin >> data;
            push_back(data);
        }
    }

    DT middleelem(){
        Nod* slow=head;
        Nod*fast=head;
        while(fast!= nullptr && fast->next!= nullptr)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow->data;
    }
};

void testList(){
    List<int> list;
    cout<< "Inseram 20 de elemente in lista: \n\tLista noua:";
    for(int i = 0; i < 20; i++){
        list.push_back(i);
        cout << i << " ";
    }
    cout<<"\nStergem ultimele 10 elemente: \n\tElemente sterse:";
    for(int i = 0; i < 10; i++){
        cout<<list.pop_back()<< " ";
    }
    cout<<"\n\tLista noua:";
    list.print();
    cout<<"Marimea listei: "<<list.getSize()<<"\nInseram elemente pe 3,4,5:\n\tLista noua:";
    for(int i = 3; i < 6; i++){
        list.insert(i, i*1000);
    }
    list.print();
    cout<<"Stergem elemntele 0,1,2:\n\tLista noua:";
    for(int i = 0; i < 3; i++){
        cout<<list.erase(i)<<" ";
    }
    list.print();
    cout<<"Testam operatorul []: \n\t";
    for(int i = 0; i < list.getSize(); i++){
        cout<<list[i]<<" ";
    }

}
 void Sum()
 {
    List<int> Lista;
    int s=0;
    Lista.read();
    for(int i=0; i<Lista.getSize(); i++)
    {
        s= s+ Lista[i];
    }
    cout<< s;
 }

 void mijloc(){
    List<int> l;
    l.read();
    cout<<l.middleelem();
}

int main() {
    mijloc();
    return 0;
}

